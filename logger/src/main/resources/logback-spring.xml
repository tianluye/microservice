<?xml version="1.0" encoding="UTF-8"?>

<!-- configuration.scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- configuration.scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- configuration.debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 引入其他的资源配置文件 -->
    <include resource="org/springframework/boot/logging/logback/base.xml"/>

    <!-- 定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值 -->
    <!-- 通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使 "${}" 来使用变量。 -->
    <property name="LOG_HOME" value="/tmp/logs/tly-log"/>
    <!-- 引入属性配置文件 -->
    <property resource="logback-spring.properties"/>

    <!-- 获取时间戳字符串 -->
    <!-- timestamp.key: 标识此<timestamp> 的名字 -->
    <!-- timestamp.datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循 Java.txt.SimpleDateFormat的格式。 -->
    <timestamp key="bySecond" datePattern="yyyyMMdd'##'HHmmss"/>

    <!-- 上下文名称 每个 logger都关联到 logger上下文，默认上下文名称为 "default"。一旦设置，不能修改。 -->
    <!-- 若要使用 property，则一定要放在定义属性的下面，否则识别不到 -->
    <contextName>${CONTEXT_HOME}(${bySecond})</contextName>

    <!-- 自定义 pattern转换规则 -->
    <conversionRule conversionWord="logTag" converterClass="com.tly.logger.convert.LogTagConvert"/>

    <!-- 读取 Spring里的配置参数，可以指定默认值 -->
    <springProperty scope="context" name="profiles" source="spring.profiles.active"/>
    <springProperty scope="context" name="sitConsole" source="sit.console" defaultValue="false"/>

    <include resource="logback-base.xml"/>

    <!-- 根据 profile来区分日志输出级别 和输出方式 -->
    <springProfile name="default">
        <!-- <logger> 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定 <appender>。 -->
        <!-- <logger>仅有一个name属性，一个可选的level和一个可选的 additivity属性。 -->
        <logger name="com.tly.logger" additivity="false">
            <!-- <logger> name属性，用来指定受此 logger约束的某一个包或者具体的某一个类。 -->
            <!-- <logger> level属性，用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF -->
            <!-- logger.level 还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。 -->
            <!-- logger.level 如果未设置此属性，那么当前 logger将会继承上级的级别。 -->
            <!-- logger.addtivity 是否向上级 logger传递打印信息。默认是true。会在Root中打印。如果root也引用了自定义logger中引用过的appender，则Root就会打印两份信息到appender -->
            <appender-ref ref="STDOUT"/>
            <!-- <logger>可以包含零个或多个 <appender-ref>元素，标识这个appender将会添加到这个logger。 -->
            <appender-ref ref="FILE"/>
        </logger>
    </springProfile>

    <!-- 开发，测试环境 -->
    <springProfile name="dev, test">
        <logger name="com.tly.logger" additivity="false">
            <appender-ref ref="FILE"/>
        </logger>
    </springProfile>

    <!-- 验收环境 -->
    <springProfile name="sit">
        <!-- property() 方法读取 springProperty定义的属性值，可以使用 String.class的一些方法进行转换再比较 -->
        <if condition='property("sitConsole").equals("true")'>
            <then>
                <logger name="com.tly.logger" additivity="false">
                    <appender-ref ref="STDOUT"/>
                </logger>
            </then>
            <else>
                <logger name="com.tly.logger" additivity="false">
                    <appender-ref ref="FILE"/>
                </logger>
            </else>
        </if>
    </springProfile>

    <!-- <root> 也是 <logger> 元素，但是它是根 logger。只有一个 level属性，应为已经被命名为 "root" -->
    <!-- <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个 logger。 -->
    <!-- level: 用来设置打印级别。大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。 -->
    <!--<root level="INFO">-->
        <!--<appender-ref ref="STDOUT"/>-->
        <!--<appender-ref ref="FILE"/>-->
    <!--</root>-->
</configuration>